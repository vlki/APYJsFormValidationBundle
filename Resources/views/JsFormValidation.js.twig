/*
 * This file is part of the JsFormValidationBundle.
 *
 * (c) Abhoryo <abhoryo@free.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

{% block before %}{% endblock %}

var jsfv = new function () {
    function getComputeMessage(key, placeholders, number) { 
        ExposeTranslation.placeHolderPrefix = '{{ '{{' }} ';
        ExposeTranslation.placeHolderSuffix = ' {{ '}}' }}';
        // Default translations
        if (!ExposeTranslation.has('validators:'+key)) {
            ExposeTranslation.add('validators:'+key, key);
        }

        return ExposeTranslation.get('validators:'+key, placeholders, number);
    }

    function isNotDefined(value) {
        return (typeof(value) == 'undefined' || null === value || '' === value);
    }

    function checkError(field, checkFunction, parameters) {
        field = jsfv.id(field);
        // Remove old errors of the field
        {% block removeErrors %}$(field).siblings('ul.error_list').remove();{% endblock %}

        // Check the value
        errorMessage = checkFunction({% block getVal %}$(field).val(){% endblock %}, parameters);
        if (errorMessage != true) {
{% block addError %}
            // Add errors block
            field = $(field);
            if (field.siblings('ul.error_list').length == 0)  {
                field.before('<ul class="error_list"></ul>');
            }

            // Add error
            field.prev().filter('ul').append('<li>'+errorMessage+'</li>');
{% endblock %}

            return false;
        }

        return true;
    }
{% for librairyCall in librairyCalls %}

{% include librairyCall %}

{% endfor %}

    return {
        id: function (id) {
            return document.getElementById(id);
        },
        onEvent: function (field, eventType, handler) {
            if (typeof(field) == 'string') {
                field = jsfv.id(field);
            }
{% block onEvent %}
            $(field).bind(eventType, handler);
{% endblock %}
        },
{% for fieldName, constraints in fieldConstraints %}
        check_{{ fieldName }}: function() {
{% if constraints|length == 1 %}
{% for constraint in constraints %}
            return checkError('{{ fieldName }}', {{ constraint.name }}, {{ constraint.parameters|raw }} );
{% endfor %}
{% else %}
            result = true;
{% for constraint in constraints %}
            result = result && checkError('{{ fieldName }}', {{ constraint.name }}, {{ constraint.parameters|raw }} );
{% endfor %}
            return result;
{% endif %}
        },
        onReady: function() {
{% if check_modes.submit %}
            // On submit checks
            var form = jsfv.id('{{ formName }}');

            // Form exists ?
            if (form) {
                // Get the form
                if ( form.nodeName.toLowerCase() != 'form') {
                    form = jsfv.id('ma_form__token').form;
                }

                jsfv.onEvent(form, 'submit', function() {
                    var submitForm = true;
{% for fieldName, constraints in fieldConstraints %}
                    submitForm = jsfv.check_{{ fieldName }}() && submitForm;
{% endfor %}
                    return submitForm;
                });
            }
{% endif %}

{% if check_modes.blur %}
            // On blur checks
{% for fieldName, constraints in fieldConstraints %}
            jsfv.onEvent('{{ fieldName }}', 'blur', jsfv.check_{{ fieldName }});
{% endfor %}
{% endif %}
        }{% if not loop.last %},{% endif %}
{% endfor %}
    };
}

{% block onReady %}
$(jsfv.onReady);
{% endblock %}

{% block after %}{% endblock %}
